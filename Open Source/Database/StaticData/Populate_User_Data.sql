--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com); adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [dbo].[User] ON

--Are users present? If so, do nothing!
DECLARE @UsrCnt int
SELECT @UsrCnt = (select COUNT(*) from [dbo].[User]  ) 
IF @UsrCnt = 0

 BEGIN

		 MERGE INTO [dbo].[User] AS Target
			USING (VALUES
			   (1,'administrator','$LEB@n0n$tsEIVBD/6W+d4BjVkQLfQng=:jLBFmhBikNIVwA9GgpN9hjGqa+c=','Questify Builder Administrator',1,GETDATE(),1,GETDATE(),1,'default')
			) AS Source ([id],[userName],[password],[fullName],[Active],[creationDate],[createdBy],[modifiedDate],[modifiedBy],[authenticationType])
		ON (Target.[id] = Source.[id])
		WHEN MATCHED AND (
			NULLIF(Source.[userName], Target.[userName]) IS NOT NULL OR NULLIF(Target.[userName], Source.[userName]) IS NOT NULL OR 
			NULLIF(Source.[password], Target.[password]) IS NOT NULL OR NULLIF(Target.[password], Source.[password]) IS NOT NULL OR 
			NULLIF(Source.[fullName], Target.[fullName]) IS NOT NULL OR NULLIF(Target.[fullName], Source.[fullName]) IS NOT NULL OR 
			NULLIF(Source.[Active], Target.[Active]) IS NOT NULL OR NULLIF(Target.[Active], Source.[Active]) IS NOT NULL OR 
			NULLIF(Source.[creationDate], Target.[creationDate]) IS NOT NULL OR NULLIF(Target.[creationDate], Source.[creationDate]) IS NOT NULL OR 
			NULLIF(Source.[createdBy], Target.[createdBy]) IS NOT NULL OR NULLIF(Target.[createdBy], Source.[createdBy]) IS NOT NULL OR 
			NULLIF(Source.[modifiedDate], Target.[modifiedDate]) IS NOT NULL OR NULLIF(Target.[modifiedDate], Source.[modifiedDate]) IS NOT NULL OR 
			NULLIF(Source.[modifiedBy], Target.[modifiedBy]) IS NOT NULL OR NULLIF(Target.[modifiedBy], Source.[modifiedBy]) IS NOT NULL OR 
			NULLIF(Source.[authenticationType], Target.[authenticationType]) IS NOT NULL OR NULLIF(Target.[authenticationType], Source.[authenticationType]) IS NOT NULL) THEN
		 UPDATE SET
			[userName] = Source.[userName], 
			[password] = Source.[password], 
			[fullName] = Source.[fullName], 
			[Active] = Source.[Active], 
			[creationDate] = Source.[creationDate], 
			[createdBy] = Source.[createdBy], 
			[modifiedDate] = Source.[modifiedDate], 
			[modifiedBy] = Source.[modifiedBy], 
			[authenticationType] = Source.[authenticationType]
		WHEN NOT MATCHED BY TARGET THEN
		 INSERT([id],[userName],[password],[fullName],[Active],[creationDate],[createdBy],[modifiedDate],[modifiedBy],[authenticationType])
		 VALUES(Source.[id],Source.[userName],Source.[password],Source.[fullName],Source.[Active],Source.[creationDate],Source.[createdBy],Source.[modifiedDate],Source.[modifiedBy],Source.[authenticationType])
		WHEN NOT MATCHED BY SOURCE THEN 
		 DELETE;
  END

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [dbo].[User]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[dbo].[User] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [dbo].[User] OFF
GO
SET NOCOUNT OFF
GO

