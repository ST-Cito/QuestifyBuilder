--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com); adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

--Are permission targets present? If so, do nothing!
DECLARE @PTCnt int
SELECT @PTCnt = (select COUNT(*) from [dbo].[PermissionTarget]  ) 
IF @PTCnt = 0
BEGIN

MERGE INTO [dbo].[PermissionTarget] AS Target
USING (VALUES
  (1,'NamedTask','EditXhtmlParameterSource',0,GETDATE(),1,GETDATE(),1)
 ,(2,'BankEntity',NULL,0,GETDATE(),1,GETDATE(),1)
 ,(3,'TestEntity',NULL,0,GETDATE(),1,GETDATE(),1)
 ,(4,'TestTemplateEntity',NULL,0,GETDATE(),1,GETDATE(),1)
 ,(5,'ItemEntity',NULL,0,GETDATE(),1,GETDATE(),1)
 ,(6,'ItemLayoutTemplateEntity',NULL,0,GETDATE(),1,GETDATE(),1)
 ,(7,'MediaEntity',NULL,0,GETDATE(),1,GETDATE(),1)
 ,(8,'ControlTemplateEntity',NULL,0,GETDATE(),1,GETDATE(),1)
 ,(11,'UserEntity',NULL,0,GETDATE(),1,GETDATE(),1)
 ,(12,'UserApplicationRoleEntity',NULL,0,GETDATE(),1,GETDATE(),1)
 ,(13,'UserBankRoleEntity',NULL,0,GETDATE(),1,GETDATE(),1)
 ,(14,'RoleEntity',NULL,0,GETDATE(),1,GETDATE(),1)
 ,(15,'RolePermissionEntity',NULL,0,GETDATE(),1,GETDATE(),1)
 ,(16,'CustomBankPropertyEntity',NULL,0,GETDATE(),1,GETDATE(),1)
 ,(18,'AspectEntity',NULL,0,GETDATE(),1,GETDATE(),1)
 ,(20,'AllTargets',NULL,0,GETDATE(),1,GETDATE(),1)
 ,(21,'NamedTask','SwitchItemLayoutTemplate',0,GETDATE(),1,GETDATE(),1)
 ,(22,'NamedTask','ClearBank',0,GETDATE(),1,GETDATE(),1)
 ,(23,'NamedTask','TestDesignMinimal',0,GETDATE(),1,GETDATE(),1)
 ,(24,'NamedTask','TestDesignBasic',0,GETDATE(),1,GETDATE(),1)
 ,(25,'NamedTask','TestDesignAdvanced',0,GETDATE(),1,GETDATE(),1)
 ,(26,'NamedTask','ChangeItemCode',0,GETDATE(),1,GETDATE(),1)
 ,(27,'NamedTask','ChangeTestCode',0,GETDATE(),1,GETDATE(),1)
 ,(28,'NamedTask','RestrictedPackagePublication',0,GETDATE(),1,GETDATE(),1)
 ,(29,'DataSourceEntity',NULL,0,GETDATE(),1,GETDATE(),1)
 ,(30,'DataSourceTemplateEntity',NULL,0,GETDATE(),1,GETDATE(),1)
 ,(31,'TestPackageEntity',NULL,0,GETDATE(),1,GETDATE(),1)
 ,(32,'DeliveryEntity',NULL,0,GETDATE(),1,GETDATE(),1)
 ,(33,'NamedTask','MoveResourcesOrCustomBankProperties', 0,GETDATE(),1,GETDATE(),1)
 ,(35,'NamedTask','ImportItemsWithExcelTemplate',0,GETDATE(),1,GETDATE(),1)	
 ,(37,'NamedTask','AllowPublicationToServer',0,GETDATE(),1,GETDATE(),1)	
) AS Source ([id],[name],[targettedNamedTask],[isApplicationTarget],[creationDate],[createdBy],[modifiedDate],[modifiedBy])
ON (Target.[id] = Source.[id])
WHEN MATCHED AND (
	NULLIF(Source.[name], Target.[name]) IS NOT NULL OR NULLIF(Target.[name], Source.[name]) IS NOT NULL OR 
	NULLIF(Source.[targettedNamedTask], Target.[targettedNamedTask]) IS NOT NULL OR NULLIF(Target.[targettedNamedTask], Source.[targettedNamedTask]) IS NOT NULL OR 
	NULLIF(Source.[isApplicationTarget], Target.[isApplicationTarget]) IS NOT NULL OR NULLIF(Target.[isApplicationTarget], Source.[isApplicationTarget]) IS NOT NULL OR 
	NULLIF(Source.[creationDate], Target.[creationDate]) IS NOT NULL OR NULLIF(Target.[creationDate], Source.[creationDate]) IS NOT NULL OR 
	NULLIF(Source.[createdBy], Target.[createdBy]) IS NOT NULL OR NULLIF(Target.[createdBy], Source.[createdBy]) IS NOT NULL OR 
	NULLIF(Source.[modifiedDate], Target.[modifiedDate]) IS NOT NULL OR NULLIF(Target.[modifiedDate], Source.[modifiedDate]) IS NOT NULL OR 
	NULLIF(Source.[modifiedBy], Target.[modifiedBy]) IS NOT NULL OR NULLIF(Target.[modifiedBy], Source.[modifiedBy]) IS NOT NULL) THEN
 UPDATE SET
 [name] = Source.[name], 
[targettedNamedTask] = Source.[targettedNamedTask], 
[isApplicationTarget] = Source.[isApplicationTarget], 
[creationDate] = Source.[creationDate], 
[createdBy] = Source.[createdBy], 
[modifiedDate] = Source.[modifiedDate], 
[modifiedBy] = Source.[modifiedBy]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([id],[name],[targettedNamedTask],[isApplicationTarget],[creationDate],[createdBy],[modifiedDate],[modifiedBy])
 VALUES(Source.[id],Source.[name],Source.[targettedNamedTask],Source.[isApplicationTarget],Source.[creationDate],Source.[createdBy],Source.[modifiedDate],Source.[modifiedBy])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

END

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [dbo].[PermissionTarget]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[dbo].[PermissionTarget] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET NOCOUNT OFF
GO
