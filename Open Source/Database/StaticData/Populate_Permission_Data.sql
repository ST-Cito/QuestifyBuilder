--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com); adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

--Are premissions present? If so, do nothing!
DECLARE @PrmssnCnt int
SELECT @PrmssnCnt = (select COUNT(*) from [dbo].[Permission]  ) 
IF @PrmssnCnt = 0
BEGIN

MERGE INTO [dbo].[Permission] AS Target
USING (VALUES
  (1,'Execute','Permits to execute the named task',0,GETDATE(),1,GETDATE(),1)
 ,(2,'AddNew','Permits to view entity attributes',0,GETDATE(),1,GETDATE(),1)
 ,(3,'Refer','Permits to list entity instances',0,GETDATE(),1,GETDATE(),1)
 ,(4,'List','Permits all PL level access',0,GETDATE(),1,GETDATE(),1)
 ,(5,'View','Permits to view the attributes',0,GETDATE(),1,GETDATE(),1)
 ,(6,'Edit','Permits to view and change the..',0,GETDATE(),1,GETDATE(),1)
 ,(7,'Delete','Permits to delete...',0,GETDATE(),1,GETDATE(),1)
 ,(8,'Publish','Permits to publish',0,GETDATE(),1,GETDATE(),1)
 ,(9,'Export','Permits to export...',0,GETDATE(),1,GETDATE(),1)
 ,(10,'Import','Permits to import...',0,GETDATE(),1,GETDATE(),1)
 ,(11,'ViewSource','Permits to view the source representation ....',0,GETDATE(),1,GETDATE(),1)
 ,(12,'ViewProperties','Permits viewing the properties of the ',0,GETDATE(),1,GETDATE(),1)
 ,(13,'EditProperties','Permits changing properties ...',0,GETDATE(),1,GETDATE(),1)
 ,(14,'ImportRawData','Permits to import raw entity data ...',0,GETDATE(),1,GETDATE(),1)
 ,(15,'ExportRawData','Permits to export raw entity data ...',0,GETDATE(),1,GETDATE(),1)
 ,(16,'AddDependency','Permits to add dependencies ....',0,GETDATE(),1,GETDATE(),1)
 ,(17,'DeleteDependency','Permits to delete dependencies',0,GETDATE(),1,GETDATE(),1)
 ,(30,'FullAccess','Permits all permittable actions',0,GETDATE(),1,GETDATE(),1)
) AS Source ([id],[name],[description],[whenOwnerCondition],[creationDate],[createdBy],[modifiedDate],[modifiedBy])
ON (Target.[id] = Source.[id])
WHEN MATCHED AND (
	NULLIF(Source.[name], Target.[name]) IS NOT NULL OR NULLIF(Target.[name], Source.[name]) IS NOT NULL OR 
	NULLIF(Source.[description], Target.[description]) IS NOT NULL OR NULLIF(Target.[description], Source.[description]) IS NOT NULL OR 
	NULLIF(Source.[whenOwnerCondition], Target.[whenOwnerCondition]) IS NOT NULL OR NULLIF(Target.[whenOwnerCondition], Source.[whenOwnerCondition]) IS NOT NULL OR 
	NULLIF(Source.[creationDate], Target.[creationDate]) IS NOT NULL OR NULLIF(Target.[creationDate], Source.[creationDate]) IS NOT NULL OR 
	NULLIF(Source.[createdBy], Target.[createdBy]) IS NOT NULL OR NULLIF(Target.[createdBy], Source.[createdBy]) IS NOT NULL OR 
	NULLIF(Source.[modifiedDate], Target.[modifiedDate]) IS NOT NULL OR NULLIF(Target.[modifiedDate], Source.[modifiedDate]) IS NOT NULL OR 
	NULLIF(Source.[modifiedBy], Target.[modifiedBy]) IS NOT NULL OR NULLIF(Target.[modifiedBy], Source.[modifiedBy]) IS NOT NULL) THEN
 UPDATE SET
 [name] = Source.[name], 
[description] = Source.[description], 
[whenOwnerCondition] = Source.[whenOwnerCondition], 
[creationDate] = Source.[creationDate], 
[createdBy] = Source.[createdBy], 
[modifiedDate] = Source.[modifiedDate], 
[modifiedBy] = Source.[modifiedBy]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([id],[name],[description],[whenOwnerCondition],[creationDate],[createdBy],[modifiedDate],[modifiedBy])
 VALUES(Source.[id],Source.[name],Source.[description],Source.[whenOwnerCondition],Source.[creationDate],Source.[createdBy],Source.[modifiedDate],Source.[modifiedBy])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

END

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [dbo].[Permission]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[dbo].[Permission] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET NOCOUNT OFF
GO