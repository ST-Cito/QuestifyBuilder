<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    x:Class="Questify.Builder.UI.Wpf.Presentation.ItemEditor.Views.ScoreEditors.DataTemplates.ScoreEditors"
                    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
                    xmlns:CinchV2="clr-namespace:Cinch;assembly=Cinch.WPF"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    mc:Ignorable="d"                    
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:scoring="clr-namespace:Questify.Builder.Logic.ContentModel.Scoring;assembly=Questify.Builder.Logic"
                    xmlns:valueConverters="clr-namespace:Questify.Builder.UI.Wpf.Presentation.ValueConverters"
                    xmlns:concrete1="clr-namespace:Questify.Builder.UI.Wpf.Presentation.ItemEditor.Views.ScoreEditors.concrete"
                    xmlns:helpers="clr-namespace:Questify.Builder.UI.Wpf.Presentation.Helpers"
                    xmlns:behaviors="clr-namespace:Questify.Builder.UI.Wpf.Presentation.Behaviors"
                    xmlns:concreteAdv="clr-namespace:Questify.Builder.UI.Wpf.Presentation.ItemEditor.ViewModels.ScoreEditors.concreteAdv">

    <!--
    
    These datatemplates are named to the Class name of the View Model concatenat by _editor. 
    This constructs makes the DataTemplateSelector simple.
    
    The DataTemplateSelector in question is ScoreEditorSelector, and is used for the CellTemplate in the BlockGrid.    
    -->
    <valueConverters:RangeConverter x:Key="RangeConverter" />
    <valueConverters:DateStringConverter x:Key="DateStringConverter"/>
    <valueConverters:CasVariableValueConverter x:Key="CasVariableValue" />
    <valueConverters:ObjectEqualsParameterConverter x:Key="ObjectEquals" />
    <valueConverters:ObjectNotEqualsParameterConverter x:Key="ObjectNotEquals" />
    <valueConverters:ComparisonTypeNotEqualsParametersConverter x:Key="ComparisonTypeNotEqualsParametersConverter" />
    <valueConverters:MultiTypeStringConverter x:Key="MultiTypeStringConverter" />
    <valueConverters:NoValueStringConverter x:Key="NoValueStringConverter" />

    <valueConverters:ListHasItemsToVisibilityConverter x:Key="hasValue"/>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

    <DataTemplate x:Key="DefaultScoreEditor">
        <TextBox Text="{Binding Value.DataValue, UpdateSourceTrigger=PropertyChanged}" />
    </DataTemplate>




    <DataTemplate x:Key="StringBlockRowViewModel_editor">
        <DockPanel LastChildFill="True">
            <Button Name="btnPreProcessorRules" Width="15" DockPanel.Dock="Right" Command="{Binding EditPreProcessing}" Visibility="{Binding PreProcessingRules, Converter={StaticResource hasValue}}">
                <StackPanel>
                    <TextBlock>...</TextBlock>
                    <Popup IsOpen="{Binding ShowPopup.DataValue}" PlacementTarget="{Binding ElementName=btnPreProcessorRules}" AllowsTransparency="True" StaysOpen="False" Placement="Left">
                        <Border BorderBrush="Gray" BorderThickness="1" Margin="0,0,8,8">
                            <Border.Effect>
                                <DropShadowEffect />
                            </Border.Effect>
                            <ListView ItemsSource="{Binding PreProcessingRules}" MaxWidth="500" BorderThickness="0">
                                <ListView.ItemContainerStyle>
                                    <Style TargetType="ListViewItem">
                                        <Setter Property="Height" Value="Auto" />
                                    </Style>
                                </ListView.ItemContainerStyle>
                                <ListView.Resources>
                                    <Style TargetType="GridViewColumnHeader">
                                        <Setter Property="Visibility" Value="Visible" />
                                    </Style>
                                </ListView.Resources>
                                <ListView.View>
                                    <GridView>
                                        <GridViewColumn Header="{StaticResource ItemEditor.ScoreEditor.PreProcessingRule}">
											<GridViewColumn.CellTemplate>
												<DataTemplate>
													<CheckBox IsChecked="{Binding Checked}" Content="{Binding DisplayValue}" />
												</DataTemplate>
											</GridViewColumn.CellTemplate>
										</GridViewColumn>
                                    </GridView>
                                </ListView.View>
                            </ListView>
                        </Border>
                    </Popup>
                </StackPanel>
            </Button>
            <TextBox Text="{Binding Value.DataValue, UpdateSourceTrigger=PropertyChanged}" />
        </DockPanel>
    </DataTemplate>

    <DataTemplate x:Key="MathBlockRowViewModel_editor">

        <DataTemplate.Resources>
            <Style x:Key="NoChromeButton" TargetType="{x:Type Button}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid x:Name="Chrome" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="#ADADAD"/>
                                    <Setter Property="Opacity" TargetName="Chrome" Value="0.5"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </DataTemplate.Resources>

        <Border Background="Transparent" BorderThickness="0" Padding="0">
            <ContentControl x:Name="theContent">
                <Button Style="{DynamicResource NoChromeButton}" Command="{Binding OpenMathEditor}" >
                    <Image Source="{Binding MathImage}"
                       VerticalAlignment="Center" 
                       HorizontalAlignment="Center" 
                       Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualWidth}"
                       Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualHeight}">
                    </Image>
                </Button>
            </ContentControl>
        </Border>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding ComparisonType.DataValue}" Value="{x:Static scoring:GapComparisonType.Evaluate}">

                <!--Unless we are evaluate is selected, then override the template.-->
                <!--<TextBlock Text="{Binding Value.DataValue}" />-->
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>

                            <DockPanel LastChildFill="True">

                                <ToggleButton Name="btnPreProcessorRules" Width="15" DockPanel.Dock="Right">
                                    <StackPanel>
                                        <TextBlock>...</TextBlock>
                                        <Popup
                                            IsOpen="{Binding IsChecked, ElementName=btnPreProcessorRules}"
                                            PlacementTarget="{Binding ElementName=btnPreProcessorRules}"
                                            AllowsTransparency="True" StaysOpen="False" Placement="Left"
                                            DataContext="{Binding Value.DataValue,Converter={StaticResource CasVariableValue},Mode=TwoWay}"
                                            Closed="ExplicitBindingUpdateOnClosed">

                                            <concrete1:CasVariableEditor x:Name="PopupControl"  />

                                        </Popup>
                                    </StackPanel>
                                </ToggleButton>


                                <TextBox Text="{Binding Value.DataValue, UpdateSourceTrigger=PropertyChanged}" IsReadOnly="True" />
                            </DockPanel>

                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>

    </DataTemplate>

    <DataTemplate x:Key="IntegerBlockRowViewModel_editor">
        <ContentControl x:Name="theContent"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding  ComparisonType.DataValue, 
                                            Converter={StaticResource ComparisonTypeNotEqualsParametersConverter},
                                            ConverterParameter='Dependency|Range'}" Value="True">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBox d:DataContext="{d:DesignInstance concreteAdv:IntegerBlockRowViewModel}">
                                <TextBox.Text>
                                    <helpers:CultureAwareBinding Path="Value.DataValue" ValidatesOnDataErrors="True" ValidatesOnExceptions="True" UpdateSourceTrigger="PropertyChanged" Converter="{StaticResource MultiTypeStringConverter}" ConverterParameter="ConvertToMultiTypeInteger" />
                                </TextBox.Text>
                                <i:Interaction.Behaviors>
                                    <behaviors:TextBoxIntegerBehavior MaxLength="{Binding MaxLength}"/>
                                </i:Interaction.Behaviors>
                            </TextBox>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <!-- Integer Dependency-->
            <DataTrigger Binding="{Binding ComparisonType.DataValue}" Value="{x:Static scoring:GapComparisonType.Dependency}">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <Border Background="Transparent" BorderThickness="0" Padding="0">
                                    <Image Source="{Binding MathImage}"
                                   VerticalAlignment="Center" 
                                   HorizontalAlignment="Center" 
                                   Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualWidth}"
                                   Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualHeight}">
                                    </Image>
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="MouseLeftButtonUp">
                                            <CinchV2:EventToCommandTrigger Command="{Binding OpenMathEditor}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </Border>
                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <!-- Integer RANGE-->
            <DataTrigger Binding="{Binding ComparisonType.DataValue}" Value="{x:Static scoring:GapComparisonType.Range}">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBox d:DataContext="{d:DesignInstance concreteAdv:IntegerBlockRowViewModel}">
                                <TextBox.Text>
                                    <MultiBinding ValidatesOnDataErrors="True" Converter="{StaticResource RangeConverter}" ConverterParameter="ConvertToMultiTypeInteger" UpdateSourceTrigger="PropertyChanged">
                                        <Binding Path="Value.DataValue"/>
                                        <Binding Path="Value2.DataValue"/>
                                    </MultiBinding>
                                </TextBox.Text>
                                <i:Interaction.Behaviors>
                                    <behaviors:TextBoxIntegerIntervalBehavior MaxLength="12"/>
                                </i:Interaction.Behaviors>
                            </TextBox>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="DecimalBlockRowViewModel_editor">
        <ContentControl x:Name="theContent"/>
        <DataTemplate.Triggers>

            <DataTrigger Binding="{Binding  ComparisonType.DataValue, 
                                            Converter={StaticResource ComparisonTypeNotEqualsParametersConverter},
                                            ConverterParameter='Dependency|Range'}" Value="True">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <!--The delay in the binding gives the user some time to type the decimal separator-->
                            <TextBox d:DataContext="{d:DesignInstance concreteAdv:DecimalBlockRowViewModel}">
                                <TextBox.Text>
                                    <helpers:CultureAwareBinding Path="Value.DataValue" ValidatesOnDataErrors="True" ValidatesOnExceptions="True" UpdateSourceTrigger="PropertyChanged" Delay="1000" Converter="{StaticResource MultiTypeStringConverter}" ConverterParameter="ConvertToMultiTypeDecimal" />
                                </TextBox.Text>
                                <i:Interaction.Behaviors>
                                    <behaviors:TextboxDecimalBehavior IntegerPartMaxLength="{ Binding IntegerPartMaxLength.DataValue}" FractionPartMaxLength="{Binding FractionPartMaxLength.DataValue}" />
                                </i:Interaction.Behaviors>
                            </TextBox>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <!-- Decimal Dependency-->
            <DataTrigger Binding="{Binding ComparisonType.DataValue}" Value="{x:Static scoring:GapComparisonType.Dependency}">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <Border Background="Transparent" BorderThickness="0" Padding="0">
                                    <Image Source="{Binding MathImage}"
                                   VerticalAlignment="Center" 
                                   HorizontalAlignment="Center" 
                                   Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualWidth}"
                                   Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualHeight}">
                                    </Image>
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="MouseLeftButtonUp">
                                            <CinchV2:EventToCommandTrigger Command="{Binding OpenMathEditor}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </Border>
                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <!-- Decimal RANGE-->
            <DataTrigger Binding="{Binding ComparisonType.DataValue}" Value="{x:Static scoring:GapComparisonType.Range}">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBox d:DataContext="{d:DesignInstance concreteAdv:DecimalBlockRowViewModel}">
                                <TextBox.Text>
                                    <MultiBinding ValidatesOnDataErrors="True" Converter="{StaticResource RangeConverter}" ConverterParameter="ConvertToMultiTypeDecimal" UpdateSourceTrigger="PropertyChanged" >
                                        <Binding Path="Value.DataValue"/>
                                        <Binding Path="Value2.DataValue"/>
                                    </MultiBinding>
                                </TextBox.Text>
                                <i:Interaction.Behaviors>
                                    <behaviors:TextBoxDecimalIntervalBehavior IntegerPartMaxLength="{Binding IntegerPartMaxLength.DataValue}" FractionPartMaxLength="{Binding FractionPartMaxLength.DataValue}"/>
                                </i:Interaction.Behaviors>
                            </TextBox>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="CurrencyBlockRowViewModel_editor">
        <ContentControl x:Name="theContent"/>
        <DataTemplate.Triggers>

            <DataTrigger Binding="{Binding  ComparisonType.DataValue, 
                                            Converter={StaticResource ObjectNotEquals},
                                            ConverterParameter={x:Static scoring:GapComparisonType.Range}}" Value="True">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <!--The delay in the binding gives the user some time to type the decimal separator-->
                            <TextBox Text="{helpers:CultureAwareBinding Value.DataValue,ValidatesOnDataErrors=True,ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged, Delay=1000}" d:DataContext="{d:DesignInstance concreteAdv:CurrencyBlockRowViewModel}">
                                <i:Interaction.Behaviors>
                                    <behaviors:TextboxDecimalBehavior IntegerPartMaxLength="{ Binding IntegerPartMaxLength.DataValue}" FractionPartMaxLength="{Binding FractionPartMaxLength.DataValue}" />
                                </i:Interaction.Behaviors>
                            </TextBox>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <!-- Currency RANGE-->
            <DataTrigger Binding="{Binding ComparisonType.DataValue}" Value="{x:Static scoring:GapComparisonType.Range}">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBox d:DataContext="{d:DesignInstance concreteAdv:CurrencyBlockRowViewModel}">
                                <TextBox.Text>
                                    <MultiBinding ValidatesOnDataErrors="True" Converter="{StaticResource RangeConverter}" ConverterParameter="ConvertToDecimal" UpdateSourceTrigger="PropertyChanged">
                                        <Binding Path="Value.DataValue"/>
                                        <Binding Path="Value2.DataValue"/>
                                    </MultiBinding>
                                </TextBox.Text>
                                <i:Interaction.Behaviors>
                                    <behaviors:TextBoxDecimalIntervalBehavior IntegerPartMaxLength="{Binding IntegerPartMaxLength.DataValue}" FractionPartMaxLength="{Binding FractionPartMaxLength.DataValue}"/>
                                </i:Interaction.Behaviors>
                            </TextBox>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>

    </DataTemplate>

    <DataTemplate x:Key="TimeBlockRowViewModel_editor">
        <TextBox Text="{Binding Value.DataValue, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" d:DataContext="{d:DesignInstance concreteAdv:TimeBlockRowViewModel}">
            <i:Interaction.Behaviors>
                <behaviors:TextboxTimeBehavior TimeFormat="{Binding TimeFormat}" />
            </i:Interaction.Behaviors>
        </TextBox>
    </DataTemplate>

    <DataTemplate x:Key="DateBlockRowViewModel_editor">
        <DatePicker HorizontalAlignment="Left" 
		    VerticalAlignment="Top" 
		    SelectedDate="{Binding Path=Value.DataValue, ValidatesOnDataErrors=True,Converter={StaticResource DateStringConverter}, UpdateSourceTrigger=PropertyChanged}">
        </DatePicker>
    </DataTemplate>

    <DataTemplate x:Key="ChoiceBlockRowViewModel_editor">
        <ComboBox ItemsSource="{Binding Choices.DataValue}" DisplayMemberPath="Value" SelectedValuePath="Id" Validation.ErrorTemplate="{DynamicResource DefaultErrorTemplate}" 
                  SelectedValue="{Binding Value.DataValue, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" 
                  d:DataContext="{d:DesignInstance concreteAdv:ChoiceBlockRowViewModel}"
                  IsEditable="True">
            <i:Interaction.Behaviors>
                <behaviors:ComboBoxMCRestrictionBehaviour NumericIdentifiers="{Binding NumericIdentifiers.DataValue}"  AlternativesCount="{Binding AlternativesCount.DataValue}" />
            </i:Interaction.Behaviors>
        </ComboBox>
    </DataTemplate>

    <DataTemplate x:Key="MatrixBlockRowViewModel_editor">
        <ComboBox ItemsSource="{Binding Choices.DataValue}" DisplayMemberPath="Value" SelectedValuePath="Id" SelectedValue="{Binding Value.DataValue, UpdateSourceTrigger=PropertyChanged}" IsEditable="True">
            <i:Interaction.Behaviors>
                <behaviors:ComboBoxMCRestrictionBehaviour NumericIdentifiers="{Binding NumericIdentifiers.DataValue}"  AlternativesCount="{Binding AlternativesCount.DataValue}" />
            </i:Interaction.Behaviors>
        </ComboBox>
    </DataTemplate>

    <DataTemplate x:Key="BooleanBlockRowViewModel_editor">
        <CheckBox IsChecked="{Binding Value.DataValue, UpdateSourceTrigger=PropertyChanged}"></CheckBox>
    </DataTemplate>

    <DataTemplate x:Key="MultiResponseBlockRowViewModel_editor">
        <CheckBox IsChecked="{Binding Value.DataValue, UpdateSourceTrigger=PropertyChanged}"></CheckBox>
    </DataTemplate>

    <DataTemplate x:Key="HotTextBlockRowViewModel_editor">
        <CheckBox IsChecked="{Binding Value.DataValue, UpdateSourceTrigger=PropertyChanged}"></CheckBox>
    </DataTemplate>

    <DataTemplate x:Key="HotTextCorrectionBlockRowViewModel_editor">
        <DockPanel LastChildFill="True">
            <Button Name="btnPreProcessorRules" Width="15" DockPanel.Dock="Right" Command="{Binding EditPreProcessing}" Visibility="{Binding PreProcessingRules, Converter={StaticResource hasValue}}">
                <StackPanel>
                    <TextBlock>...</TextBlock>
                    <Popup IsOpen="{Binding ShowPopup.DataValue}" PlacementTarget="{Binding ElementName=btnPreProcessorRules}" AllowsTransparency="True" StaysOpen="False" Placement="Left">
                        <Border BorderBrush="Gray" BorderThickness="1" Margin="0,0,8,8">
                            <Border.Effect>
                                <DropShadowEffect />
                            </Border.Effect>
                            <ListView ItemsSource="{Binding PreProcessingRules}" MaxWidth="500" BorderThickness="0">
                                <ListView.Resources>
                                    <Style TargetType="GridViewColumnHeader">
                                        <Setter Property="Visibility" Value="Visible" />
                                    </Style>
                                </ListView.Resources>
                                <ListView.View>
                                    <GridView>
										<GridViewColumn Header="{StaticResource ItemEditor.ScoreEditor.PreProcessingRule}">
                                            <GridViewColumn.CellTemplate>
                                                <DataTemplate>
													<CheckBox IsChecked="{Binding Checked}" Content="{Binding DisplayValue}" />
                                                </DataTemplate>
                                            </GridViewColumn.CellTemplate>
                                        </GridViewColumn>
                                    </GridView>
                                </ListView.View>
                            </ListView>
                        </Border>
                    </Popup>
                </StackPanel>
            </Button>
            <TextBox Text="{Binding Value.DataValue, UpdateSourceTrigger=PropertyChanged}" />
        </DockPanel>
    </DataTemplate>

    <DataTemplate x:Key="GapMatchBlockRowViewModel_editor">
        <ContentControl x:Name="theContent"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding  ComparisonType.DataValue, 
                                            Converter={StaticResource ComparisonTypeNotEqualsParametersConverter},
                                            ConverterParameter='NoValue'}" Value="True">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <ComboBox ItemsSource="{Binding Choices.DataValue}" DisplayMemberPath="Value" SelectedValuePath="Id" 
                              Validation.ErrorTemplate="{DynamicResource DefaultErrorTemplate}" 
                              SelectedValue="{Binding Value.DataValue, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource NoValueStringConverter}}"  
                              d:DataContext="{d:DesignInstance concreteAdv:GapMatchBlockRowViewModel}" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <!-- NoValue is correct -->
            <DataTrigger Binding="{Binding ComparisonType.DataValue}" Value="{x:Static scoring:GapComparisonType.NoValue}">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock Text="" Padding="0,4,0,0" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="GapMatchRichTextBlockRowViewModel_editor">
        <ContentControl x:Name="theContent"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding  ComparisonType.DataValue, 
                                            Converter={StaticResource ComparisonTypeNotEqualsParametersConverter},
                                            ConverterParameter='NoValue'}" Value="True">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>

                        <ControlTemplate>
                            <ComboBox ItemsSource="{Binding Choices.DataValue}" DisplayMemberPath="Value" SelectedValuePath="Id" 
                                  Validation.ErrorTemplate="{DynamicResource DefaultErrorTemplate}" 
                                  SelectedValue="{Binding Value.DataValue, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource NoValueStringConverter}}"  
                                  d:DataContext="{d:DesignInstance concreteAdv:GapMatchBlockRowViewModel}">
                            </ComboBox>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <!-- NoValue is correct -->
            <DataTrigger Binding="{Binding ComparisonType.DataValue}" Value="{x:Static scoring:GapComparisonType.NoValue}">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock Text="" Padding="0,4,0,0" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="OrderBlockRowViewModel_editor">
        <ComboBox ItemsSource="{Binding MovableElements.DataValue}" DisplayMemberPath="Value" SelectedValuePath="Id"
                  Validation.ErrorTemplate="{DynamicResource DefaultErrorTemplate}" 
                  SelectedValue="{Binding Value.DataValue, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" 
                  d:DataContext="{d:DesignInstance concreteAdv:OrderBlockRowViewModel}"/>
    </DataTemplate>

    <DataTemplate x:Key="GraphGapMatchBlockRowViewModel_editor">
        <ContentControl x:Name="theContent"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding  ComparisonType.DataValue, 
                                            Converter={StaticResource ComparisonTypeNotEqualsParametersConverter},
                                            ConverterParameter='NoValue'}" Value="True">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <ComboBox ItemsSource="{Binding Choices.DataValue}" DisplayMemberPath="Value" SelectedValuePath="Id" 
                                Validation.ErrorTemplate="{DynamicResource DefaultErrorTemplate}" 
                                SelectedValue="{Binding Value.DataValue, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource NoValueStringConverter}}"  
                                d:DataContext="{d:DesignInstance concreteAdv:GraphGapMatchBlockRowViewModel}">
                            </ComboBox>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <!-- NoValue is correct -->
            <DataTrigger Binding="{Binding ComparisonType.DataValue}" Value="{x:Static scoring:GapComparisonType.NoValue}">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock Text="" Padding="0,4,0,0" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="GraphGapMatchVar2BlockRowViewModel_editor">
        <ContentControl x:Name="theContent"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding  ComparisonType.DataValue, 
                                            Converter={StaticResource ComparisonTypeNotEqualsParametersConverter},
                                            ConverterParameter='NoValue'}" Value="True">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <ComboBox ItemsSource="{Binding Choices.DataValue}" DisplayMemberPath="Value" SelectedValuePath="Id" 
                                Validation.ErrorTemplate="{DynamicResource DefaultErrorTemplate}" 
                                SelectedValue="{Binding Value.DataValue, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource NoValueStringConverter}}"
                                d:DataContext="{d:DesignInstance concreteAdv:GraphGapMatchVar2BlockRowViewModel}">
                            </ComboBox>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <!-- NoValue is correct -->
            <DataTrigger Binding="{Binding ComparisonType.DataValue}" Value="{x:Static scoring:GapComparisonType.NoValue}">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock Text="" Padding="0,4,0,0" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="InlineChoiceBlockRowViewModel_editor">
        <ComboBox ItemsSource="{Binding Choices.DataValue}" DisplayMemberPath="Value" 
                  SelectedValuePath="Id" SelectedValue="{Binding Value.DataValue, UpdateSourceTrigger=PropertyChanged}" />
    </DataTemplate>

    <DataTemplate x:Key="MathCasDependencyBlockRowViewModel_editor">
        <StackPanel>
            <Border Background="Transparent" BorderThickness="0" Padding="0">
                <Image Source="{Binding MathImage}"
               VerticalAlignment="Center" 
               HorizontalAlignment="Center" 
               Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualWidth}"
               Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualHeight}">
                </Image>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseLeftButtonUp">
                        <CinchV2:EventToCommandTrigger Command="{Binding OpenMathEditor}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Border>
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="MathCasEqualBlockRowViewModel_editor">
        <StackPanel>
            <Border Background="Transparent" BorderThickness="0" Padding="0">
                <Image Source="{Binding MathImage}"
               VerticalAlignment="Center" 
               HorizontalAlignment="Center" 
               Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualWidth}"
               Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualHeight}">
                </Image>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseLeftButtonUp">
                        <CinchV2:EventToCommandTrigger Command="{Binding OpenMathEditor}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Border>
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="GeogebraBlockRowViewModel_editor">
        <DockPanel LastChildFill="True">
            <TextBlock Text="{Binding Value.DataValue}" Padding="0,4,0,0" />
        </DockPanel>
    </DataTemplate>

    <DataTemplate x:Key="SelectPointBlockRowViewModel_editor">
        <DockPanel LastChildFill="True">
            <TextBlock Text="{Binding Value.DataValue}" Padding="0,4,0,0" />
        </DockPanel>
    </DataTemplate>

</ResourceDictionary>