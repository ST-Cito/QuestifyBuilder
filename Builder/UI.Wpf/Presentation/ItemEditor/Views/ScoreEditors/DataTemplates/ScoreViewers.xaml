<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:scoring="clr-namespace:Questify.Builder.Logic.ContentModel.Scoring;assembly=Questify.Builder.Logic"
                    xmlns:valueConverters="clr-namespace:Questify.Builder.UI.Wpf.Presentation.ValueConverters"
                    xmlns:scoreEditors="clr-namespace:Questify.Builder.UI.Wpf.Presentation.ItemEditor.Views.ScoreEditors">

    <!--
    
    These datatemplates are named to the Class name of the View Model concatenated with _viewer. 
    This constructs makes the DataTemplateSelector simple.
    
    The DataTemplateSelector in question is ScoreViewerSelector, and is used for the CellTemplate in the BlockGrid.    
    -->

    <!--
    Examples:
    <DataTemplate x:Key="IntegerBlockRowViewModel_viewer">
    ...
    
    <DataTemplate x:Key="ChoiceBlockRowViewModel_viewer">
    ...    
    -->
    <valueConverters:ObjectNotEqualsParameterConverter x:Key="ObjectNotEquals" />

    <DataTemplate x:Key="DefaultScoreViewer">
        <TextBlock Text="{Binding DisplayValue}" Padding="4,4,4,0" />
    </DataTemplate>

    <DataTemplate x:Key="StringBlockRowViewModel_viewer">
        <scoreEditors:AdornedTextBlock Text="{Binding Value.DataValue}" ShowAdorner="{Binding ShowAdorner.DataValue}" Padding="4,4,4,0" />
    </DataTemplate>

    <DataTemplate x:Key="BooleanBlockRowViewModel_viewer">
        <CheckBox IsHitTestVisible="False" Focusable="False" IsChecked="{Binding Value.DataValue}"></CheckBox>
    </DataTemplate>

    <DataTemplate x:Key="MultiResponseBlockRowViewModel_viewer">
        <CheckBox IsHitTestVisible="False" Focusable="False" IsChecked="{Binding Value.DataValue}"></CheckBox>
    </DataTemplate>

    <DataTemplate x:Key="HotTextBlockRowViewModel_viewer">
        <CheckBox IsHitTestVisible="False" Focusable="False" IsChecked="{Binding Value.DataValue}"></CheckBox>
    </DataTemplate>

    <DataTemplate x:Key="HotTextCorrectionBlockRowViewModel_viewer">
        <scoreEditors:AdornedTextBlock Text="{Binding Value.DataValue}" ShowAdorner="{Binding ShowAdorner.DataValue}" Padding="4,4,4,0" />
    </DataTemplate>

    <DataTemplate x:Key="IntegerBlockRowViewModel_viewer">
        <ContentControl x:Name="theContent"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding  ComparisonType.DataValue, 
                                            Converter={StaticResource ObjectNotEquals},
                                            ConverterParameter={x:Static scoring:GapComparisonType.Dependency}}" Value="True">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock Text="{Binding DisplayValue}" Padding="4,4,4,0" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            
            <DataTrigger Binding="{Binding ComparisonType.DataValue}" Value="{x:Static scoring:GapComparisonType.Dependency}">

                <!--Unless we are evaluate is selected, then override the template.-->
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Border Background="Transparent" BorderThickness="0" Padding="0">
                                <ContentControl x:Name="theContent"
                            Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualWidth}"
                            Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualHeight}">
                                    <!--The default template-->
                                    <Image Source="{Binding MathImage}" 
                    ToolTipService.Placement="Top" 
                    VerticalAlignment="Center" 
                    HorizontalAlignment="Center" 
                    Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualWidth}"
                    Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualHeight}">
                                        <Image.ToolTip>
                                            <StackPanel Orientation="Horizontal">
                                                <Image Source="{Binding MathImage}" />
                                            </StackPanel>
                                        </Image.ToolTip>
                                    </Image>
                                </ContentControl>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="DecimalBlockRowViewModel_viewer">
        <ContentControl x:Name="theContent"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding  ComparisonType.DataValue, 
                                            Converter={StaticResource ObjectNotEquals},
                                            ConverterParameter={x:Static scoring:GapComparisonType.Dependency}}" Value="True">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock Text="{Binding DisplayValue}" Padding="4,4,4,0" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding ComparisonType.DataValue}" Value="{x:Static scoring:GapComparisonType.Dependency}">

                <!--Unless we are evaluate is selected, then override the template.-->
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Border Background="Transparent" BorderThickness="0" Padding="0">
                                <ContentControl x:Name="theContent"
                            Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualWidth}"
                            Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualHeight}">
                                    <!--The default template-->
                                    <Image Source="{Binding MathImage}" 
                    ToolTipService.Placement="Top" 
                    VerticalAlignment="Center" 
                    HorizontalAlignment="Center" 
                    Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualWidth}"
                    Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualHeight}">
                                        <Image.ToolTip>
                                            <StackPanel Orientation="Horizontal">
                                                <Image Source="{Binding MathImage}" />
                                            </StackPanel>
                                        </Image.ToolTip>
                                    </Image>
                                </ContentControl>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="MathBlockRowViewModel_viewer">
        <Border Background="Transparent" BorderThickness="0" Padding="0">
            <ContentControl x:Name="theContent"
                            Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualWidth}"
                            Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualHeight}">
                <!--The default template-->
                <Image Source="{Binding MathImage}" 
                    ToolTipService.Placement="Top" 
                    VerticalAlignment="Center" 
                    HorizontalAlignment="Center" 
                    Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualWidth}"
                    Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualHeight}">
                    <Image.ToolTip>
                        <StackPanel Orientation="Horizontal">
                            <Image Source="{Binding MathImage}" />
                        </StackPanel>
                    </Image.ToolTip>
                </Image>
            </ContentControl>
        </Border>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding ComparisonType.DataValue}" Value="{x:Static scoring:GapComparisonType.Evaluate}">

                <!--Unless we are evaluate is selected, then override the template.-->
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock Text="{Binding Value.DataValue}"></TextBlock>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="MathCasDependencyBlockRowViewModel_viewer">
        <Border Background="Transparent" BorderThickness="0" Padding="0">
            <Image Source="{Binding MathImage}" 
               ToolTipService.Placement="Top" 
               VerticalAlignment="Center" 
               HorizontalAlignment="Center" 
               Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualWidth}"
               Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualHeight}">
                <Image.ToolTip>
                    <StackPanel Orientation="Horizontal">
                        <Image Source="{Binding MathImage}" />
                    </StackPanel>
                </Image.ToolTip>
            </Image>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="MathCasEqualBlockRowViewModel_viewer">
        <Border Background="Transparent" BorderThickness="0" Padding="0">
            <Image Source="{Binding MathImage}" 
               ToolTipService.Placement="Top" 
               VerticalAlignment="Center" 
               HorizontalAlignment="Center" 
               Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualWidth}"
               Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=ActualHeight}">
                <Image.ToolTip>
                    <StackPanel Orientation="Horizontal">
                        <Image Source="{Binding MathImage}" />
                    </StackPanel>
                </Image.ToolTip>
            </Image>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="GapMatchBlockRowViewModel_viewer">
        <ContentControl x:Name="theContent"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding  ComparisonType.DataValue, 
                                            Converter={StaticResource ObjectNotEquals},
                                            ConverterParameter={x:Static scoring:GapComparisonType.NoValue}}" Value="True">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock Text="{Binding DisplayValue}" Padding="4,4,4,0" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
          
            <!-- NoValue is correct -->
            <DataTrigger Binding="{Binding ComparisonType.DataValue}" Value="{x:Static scoring:GapComparisonType.NoValue}">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock Text="" Padding="4,4,4,0" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="GapMatchRichTextBlockRowViewModel_viewer">
        <ContentControl x:Name="theContent"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding  ComparisonType.DataValue, 
                                            Converter={StaticResource ObjectNotEquals},
                                            ConverterParameter={x:Static scoring:GapComparisonType.NoValue}}" Value="True">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock Text="{Binding DisplayValue}" Padding="4,4,4,0" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <!-- NoValue is correct -->
            <DataTrigger Binding="{Binding ComparisonType.DataValue}" Value="{x:Static scoring:GapComparisonType.NoValue}">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock Text="" Padding="4,4,4,0" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="GraphGapMatchBlockRowViewModel_viewer">
        <ContentControl x:Name="theContent"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding  ComparisonType.DataValue, 
                                            Converter={StaticResource ObjectNotEquals},
                                            ConverterParameter={x:Static scoring:GapComparisonType.NoValue}}" Value="True">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock Text="{Binding DisplayValue}" Padding="4,4,4,0" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <!-- NoValue is correct -->
            <DataTrigger Binding="{Binding ComparisonType.DataValue}" Value="{x:Static scoring:GapComparisonType.NoValue}">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock Text="" Padding="4,4,4,0" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="GraphGapMatchVar2BlockRowViewModel_viewer">
        <ContentControl x:Name="theContent"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding  ComparisonType.DataValue, 
                                            Converter={StaticResource ObjectNotEquals},
                                            ConverterParameter={x:Static scoring:GapComparisonType.NoValue}}" Value="True">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock Text="{Binding DisplayValue}" Padding="4,4,4,0" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <!-- NoValue is correct -->
            <DataTrigger Binding="{Binding ComparisonType.DataValue}" Value="{x:Static scoring:GapComparisonType.NoValue}">
                <Setter TargetName="theContent" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock Text="" Padding="4,4,4,0" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="GeogebraBlockRowViewModel_viewer">
        <TextBlock Text="{Binding Value.DataValue}" Padding="4,4,4,0" ToolTip="{Binding Value.DataValue}" />
    </DataTemplate>

</ResourceDictionary>